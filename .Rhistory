setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
## This function:
## -inverts a matrix, but first checks to see if the
##  inverse has already been calculated and cached
## -if the inverse has not been cached, the function
##  then calculates the matrix inverse, then caches it
## and returns the inverse
cacheSolve <- function(x, ...) {
i <- x$getInverseMatrix()
if(!is.null(i)){
message("Getting cached data")
return (i)
}
matrix <- x$getOrigMatrix()
i <- solve(matrix, ...)
x$setInverseMatrix(i)
i
}
a<-matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
x<-makeCacheMatrix(a)
cacheSolve(x)
cacheSolve(x)
b<-matrix(c(1,2,3,4,5,6,7,8,9), ncol=3)
y<-makeCacheMatrix(b)
cacheSolve(y)
##These functions:
## -take a matrix as an input argument
## -check to see if the matrix inverse has been cached
##  to avoid calculating the inverse
## -invert the matrix
## -cache the matrix inverse
## -returns the matrix inverse
## This function:
## -clears the cache
## -creates a list of functions to
##  1) reset the matrix and clear the cache
##  2) return the original matrix
##  3) cache the inverse
##  3) return the inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
getOrigMatrix <- function() x
setInverseMatrix <- function(inv) i <<- inv
getInverseMatrix <- function(x) i
list(set = set,
getOrigMatrix = getOrigMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
## This function:
## -inverts a matrix, but first checks to see if the
##  inverse has already been calculated and cached
## -if the inverse has not been cached, the function
##  then calculates the matrix inverse, then caches it
## and returns the inverse
cacheSolve <- function(x, ...) {
i <- x$getInverseMatrix()
if(!is.null(i)){
message("Getting cached data")
return (i)
}
matrix <- x$getOrigMatrix()
i <- solve(matrix, ...)
x$setInverseMatrix(i)
i
}
a<-matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
x<-makeCacheMatrix(a)
cacheSolve(x)
cacheSolve(x)
b<-matrix(c(10,2,3,4,5,6,7,8,9), ncol=3)
y<-makeCacheMatrix(b)
cacheSolve(y)
cacheSolve(y)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(y)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(y)
cacheSolve(x)
##These functions:
## -take a matrix as an input argument
## -check to see if the matrix inverse has been cached
##  to avoid calculating the inverse
## -invert the matrix
## -cache the matrix inverse
## -returns the matrix inverse
## This function:
## -clears the cache
## -creates a list of functions to
##  1) reset the matrix and clear the cache
##  2) return the original matrix
##  3) cache the inverse
##  3) return the inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
getOrigMatrix <- function() x
setInverseMatrix <- function(inv) i <<- inv
getInverseMatrix <- function(x) i
list(set = set,
getOrigMatrix = getOrigMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
## This function:
## -inverts a matrix, but first checks to see if the
##  inverse has already been calculated and cached
## -if the inverse has not been cached, the function
##  then calculates the matrix inverse, then caches it
## and returns the inverse
cacheSolve <- function(x, ...) {
i <- x$getInverseMatrix()
if(!is.null(i)){
message("Getting cached data")
return (i)
}
matrix <- x$getOrigMatrix()
i <- solve(matrix, ...)
x$setInverseMatrix(i)
i
}
a<-matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
x<-makeCacheMatrix(a)
cacheSolve(x)
cacheSolve(x)
b<-matrix(c(10,2,3,4,5,6,7,8,9), ncol=3)
x<-makeCacheMatrix(b)
x)
cacheSolve(x)
cacheSolve(y)
cacheSolve(y)
a<-matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
x<-makeCacheMatrix(a)
cacheSolve(x)
cacheSolve(x)
b<-matrix(c(10,2,3,4,5,6,7,8,9), ncol=3)
x<-makeCacheMatrix(b)
cacheSolve(x)
cacheSolve(x)
i <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve <- function(x = matrix(), inv) {
i <- inv
if(!is.null(i)){
message("Getting cached data")
return (i)
}
i <<- solve(x, ...)
i
}
i <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve <- function(x = matrix(), inv) {
i <- inv
if(!is.null(i)){
message("Getting cached data")
return (i)
}
i <<- solve(x, ...)
i
}
cacheSolve(m)
cacheSolve(m, i)
i <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve <- function(x = matrix(), inv) {
i <- inv
if(!is.null(i)){
message("Getting cached data")
return (i)
}
i <<- solve(x)
i
}
cacheSolve(m, i)
inv <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve <- function(x = matrix(), inv) {
i <- inv
if(!is.null(i)){
message("Getting cached data")
return (i)
}
i <<- solve(x)
i
}
cacheSolve(m, inv)
inv <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve <- function(x = matrix(), inv) {
i <- inv
if(!is.null(i)){
message("Getting cached data")
return (i)
}
i <<- solve(x)
i
}
cacheSolve(m, inv)
inv <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve <- function(x = matrix(), inv) {
i <- inv
if(!is.null(i)){
message("Getting cached data")
return (i)
}
i <<- solve(x)
return(i)
}
i
inv <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve <- function(x = matrix(), inv) {
i <- inv
if(!is.null(i)){
message("Getting cached data")
return (i)
}
i <<- solve(x)
return(i)
}
cacheSolve(m, inv)
i <- NULL
inv <- NULL
i <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve(m, inv)
inv <- NULL
i <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve <- function(x = matrix(), inv) {
i <- inv
if(!is.null(i)){
message("Getting cached data")
return (i)
}
i <- solve(x)
return(i)
}
cacheSolve(m, inv)
cacheSolve(m, inv)
inv <- NULL
i <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve <- function(x = matrix(), inv) {
i <- inv
if(!is.null(i)){
message("Getting cached data")
return (i)
}
i <- solve(x)
inv <<- i
return(i)
}
cacheSolve(m, inv)
cacheSolve(m, inv)
a<-matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve(m, inv)
cacheSolve(m, inv)
cacheSolve <- function(x = matrix(), inv) {
i <- inv
if(!is.null(i)){
message("Getting cached data")
return (i)
}
i <- solve(x)
inv <<- i
return(i)
}
inv <- NULL
i <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve(m, inv)
cacheSolve(m, inv)
inv <- NULL
i <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve(m, inv)
cacheSolve(m, inv)
inv <- NULL
i <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve(m, inv)
cacheSolve(m, inv)
cacheSolve(m, inv)
cacheSolve(m, inv)
cacheSolve(m, inv)
cacheSolve(m, inv)
cacheSolve(m, inv)
cacheSolve(m, inv)
n <- matrix(c(9,8,7,4,5,6,7,8,9), ncol=3)
cacheSolve(m, inv)
cacheSolve(n, inv)
cacheSolve(n, inv)
cacheSolve(m, inv)
cacheSolve <- function(x = matrix(), inv) {
i <- inv
if(!is.null(i)){
message("Getting cached data")
return (i)
}
i <- solve(x)
inv <<- i
return(i)
i <- NULL
}
i <- NULL
inv <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve(m, inv)
cacheSolve(m, inv)
cacheSolve(m, inv)
n <- matrix(c(9,8,7,4,5,6,7,8,9), ncol=3)
cacheSolve(m, inv)
cacheSolve(n, inv)
cacheSolve <- function(x = matrix(), inv) {
if(!is.null(inv)){
message("Getting cached data")
return (inv)
} else {
inv <<- solve(x)
return(inv)
}
}
inv <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
cacheSolve(m, inv)
cacheSolve(m, inv)
cacheSolve(m, inv)
n <- matrix(c(9,8,7,4,5,6,7,8,9), ncol=3)
cacheSolve(m, inv)
cacheSolve(n, inv)
cacheSolve <- function(x = matrix(), inv) {
if(!is.null(inv)){
message("Getting cached data")
return (inv)
} else {
inv <<- solve(x)
return(inv)
}
}
inv <- NULL
m <- matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
n <- matrix(c(9,8,7,4,5,6,7,8,9), ncol=3)
cacheSolve(n, inv)
n <- matrix(c(9,8,7,6,5,4,3,2,9), ncol=3)
cacheSolve(n, inv)
cacheSolve(n, inv)
cacheSolve(m, inv)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
v <- c(1,2,3,4)
v
)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- c(1,2,3,4)
v
mv <- makeVector(v)
mv
mv$get()
mv$setmean()
mv$getmean()
str(mv)
?str
mv <- makeVector(v)
str(mv)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
v <- c(1,2,3,4)
mv <- makeVector(v)
$get()
mv$get()
str(mv)
str(mv$get)
str(v)
str(v)
str(mv$get)
str(v)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
vector <- x
}
mv <- makeVector(v)
str(mv)
mv <- makeVector(v)
mv$get()
v <- c(1,2,3,4)
mv <- makeVector(v)
mv$get()
str(mv$get)
str(mv)
str(mv$get)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
v <- c(1,2,3,4)
mv <- makeVector(v)
mv$get()
str(mv)
str(mv$get)
get$x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean,
vector = x)
}
v <- c(1,2,3,4)
mv <- makeVector(v)
mv$get()
str(mv)
str(mv$vector)
mv$get()
mv$vector
mv$vector
str(mv$vector)
